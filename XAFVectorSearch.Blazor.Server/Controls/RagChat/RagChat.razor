@using DevExpress.AIIntegration.Blazor.Chat
@using System.Reflection
@using DevExpress.Blazor
@using Markdig
@using XAFVectorSearch.Blazor.Server.Services
@inject VectorSearchService vectorSearchService

<DxAIChat CssClass="my-chat"
          UseStreaming="true" MessageSent="MessageSent"
SizeMode="SizeMode.Medium">
    <EmptyMessageAreaTemplate>
        <div class="my-chat-ui-description">
            <span style="font-weight: bold; color: #008000;">Rag Chat</span> Assistant is ready to answer your questions.
        </div>
    </EmptyMessageAreaTemplate>
    <MessageContentTemplate>
        <div class="my-chat-content">
            @ToHtml(context.Content)
        </div>
    </MessageContentTemplate>
</DxAIChat>

<style>
    .my-chat {
    width: 680px;
    margin: 20px;
    height: 500px;
    }
</style>




@code {



    IRagData _value;
    [Parameter]
    public IRagData Value
    {
        get
        {
            return _value;
        }
        set
        {
            _value = value;
        }
    }

    // async Task Initialized(IAIChat chat)
    // {
    //     Microsoft.Extensions.AI.ChatRole role = new Microsoft.Extensions.AI.ChatRole();
    //     await chat.SendMessage("Test", role);
    // }

    MarkupString ToHtml(string text)
    {
        return (MarkupString)Markdown.ToHtml(text);
    }


    @code {
        async Task MessageSent(MessageSentEventArgs args)
        {
            
            XAFVectorSearch.Module.Models.Question question = new XAFVectorSearch.Module.Models.Question(Guid.NewGuid(), args.Content);
           
            var response = await vectorSearchService.AskQuestionAsync(question, true);
            
            await args.Chat.SendMessage(response.Answer, Microsoft.Extensions.AI.ChatRole.Assistant);
        }
    }

}